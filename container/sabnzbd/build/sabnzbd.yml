---

- hosts: localhost
  gather_facts: no
  become: yes


  vars:
    sabnzbd_git: https://github.com/sabnzbd/sabnzbd.git

    nzbtomedia_git: https://github.com/clinton-hall/nzbToMedia.git

    pipbuild:
      - make
      - gcc
      - cpp
      - kernel-headers
      - glibc-devel
      - glibc-headers
      - python-devel
      - libffi-devel
      - openssl-devel
      - automake
      - autoconf

    pippackages:
      - cheetah
      - configobj
      - feedparser
      - pydbus
      - pyopenssl
      - http://www.golug.it/pub/yenc/yenc-0.4.0.tar.gz

    yumpackages:
      - par2cmdline
      - p7zip
      - p7zip-plugins
      - unzip
      - git
      - sudo
      - http://pkgs.repoforge.org/unrar/unrar-5.0.3-1.el7.rf.x86_64.rpm

    ffmpeg_source_dir: /tmp/build/ffmpeg
    ffmpeg_repo: git://source.ffmpeg.org/ffmpeg.git
    yasm_repo: git://github.com/yasm/yasm.git
    x264_repo: git://git.videolan.org/x264.git

    container_user:
      name: 'container'
      home: '/home/container'
      uid: '500'
      gid: '500'
      group: 'container'
      system: 'yes'
      shell: '/bin/bash'
      comment: 'container user'

    service_user:
      name: 'sabnzbd'
      home: '/home/sabnzbd'
      uid: '998'
      gid: '998'
      group: 'sabnzbd'
      system: 'yes'
      shell: '/bin/bash'
      comment: 'sabnzbd user'

    sabnzbd_dirs:
      - "{{service_user.home}}/admin"
      - "{{service_user.home}}/logs"
      - "{{service_user.home}}/Downloads/incomplete"
      - "{{service_user.home}}/Downloads/complete"

    sabnzbd_config: "{{service_user.home}}/sabnzbd.ini"

    sabnzbd_wc: "/opt/sabnzbd"

    nzbtomedia_wc: "/opt/nzbtomedia"

    sudoers:
      file: "/etc/sudoers.d/{{container_user.name}}"
      line: "{{container_user.name}} ALL=(ALL) NOPASSWD:ALL"

  tasks:
    - name: installing pip build requirements
      yum:
        name={{item}}
        state=latest
      with_items: "{{pipbuild}}"
      become: no
      tags:
        - setup

    - name: install python requirements with pip
      pip:
        name={{item}}
      with_items: "{{pippackages}}"
      become: no
      tags:
        - setup

    - name: install yum packages
      yum:
        name={{item}}
        state=present
      with_items: "{{yumpackages}}"
      become: no
      tags:
        - setup

    - name: install sudoers file
      copy:
        content="{{sudoers.line}}"
        dest="{{sudoers.file}}"
      become: no
      tags:
        - setup

    - name: create container group
      group:
        name="{{container_user.group}}"
        gid="{{container_user.gid}}"
        system="{{container_user.system}}"
        state=present
      become: no
      tags:
        - setup

    - name: create container user
      user:
        name="{{container_user.name}}"
        home="{{container_user.home}}"
        uid="{{container_user.uid}}"
        group="{{container_user.group}}"
        shell="{{container_user.shell}}"
        system="{{container_user.system}}"
      become: no
      tags:
        - setup

    - name: create sabnzbd group
      group:
        name="{{service_user.group}}"
        gid="{{service_user.gid}}"
        system="{{service_user.system}}"
        state=present
      become: no
      tags:
        - setup

    - name: create sabnzbd daemon user
      user:
        name="{{service_user.name}}"
        home="{{service_user.home}}"
        uid="{{service_user.uid}}"
        group="{{service_user.group}}"
        shell="{{service_user.shell}}"
        system="{{service_user.system}}"
      become: no
      tags:
        - setup

    - name: create sabnzbd home directories
      file:
        path="{{item}}"
        state=directory
        mode=0755
        owner="{{service_user.name}}"
        group="{{service_user.group}}"
      with_items:
        - "{{sabnzbd_dirs}}"
      become: no
      tags:
        - setup

    - name: compile ffmpeg
      include: ./ffmpeg.yml
      become: no
      tags:
        - setup

    - name: remove pip build requirements
      command:  yum autoremove -y {{item}}
      with_items: "{{pipbuild}}"
      ignore_errors: yes
      become: no
      tags:
        - setup

    - name: checkout sabnzbd
      git:
        repo={{sabnzbd_git}}
        dest={{sabnzbd_wc}}
      become: no
      tags:
        - setup

    - name: checkout nzbToMedia
      git:
        repo={{nzbtomedia_git}}
        dest={{nzbtomedia_wc}}
      become: no
      tags:
        - setup

    - name: copy the entrypoint script
      copy:
        src=docker-entrypoint.sh
        dest=/opt/docker-entrypoint.sh
        owner=root
        group=root
        mode=0755
      become: no
      tags:
        - setup

    - name: copy the default sabnzbd settings to /opt
      copy:
        src=sabnzbd.ini
        dest=/opt/sabnzbd.ini
        owner=root
        group=root
        mode=0644
      become: no
      tags:
        - setup

    - name: copy the sabnzbd playbook to /opt
      copy:
        src=sabnzbd.yml
        dest=/opt/sabnzbd.yml
        owner=root
        group=root
        mode=0644
      become: no
      tags:
        - setup

    # necessary because the include statement with
    # ffmpeg.yml will be executed nonetheless
    - name: copy the ffmpeg playbook to /opt
      copy:
        src=ffmpeg.yml
        dest=/opt/ffmpeg.yml
        owner=root
        group=root
        mode=0644
      become: no
      tags:
        - setup

    - name: set the permissions of the sabnzbd dir
      file:
        path={{service_user.home}}
        state=directory
        recurse=yes
        owner="{{service_user.name}}"
        group="{{service_user.group}}"
      become: no
      tags:
        - setup

#
# update sabnzbd and nzbtomedia

    - name: checkout sabnzbd
      git:
        repo="{{sabnzbd_git}}"
        dest="{{sabnzbd_wc}}"
      tags:
        - update

    - name: checkout nzbToMedia
      git:
        repo="{{nzbtomedia_git}}"
        dest="{{nzbtomedia_wc}}"
      tags:
        - update


#
# download the configuration file
#

    - name: download a current config file
      get_url:
        url="{{config_url}}"
        dest="{{sabnzbd_config}}"
        validate_certs=no
        force=yes
      when: config_url != "" and config_user == ""
      tags:
        - config

    - name: download a current config file
      get_url:
        url="{{config_url}}"
        url_username="{{config_user}}"
        url_password="{{config_pass}}"
        dest="{{sabnzbd_config}}"
        validate_certs=no
        force=yes
      when: config_url != "" and config_user != ""
      tags:
        - config

    - name: correct the owner of the configuration file
      file:
        path="{{sabnzbd_config}}"
        state=touch
        mode=0755
        owner="{{service_user.name}}"
        group="{{service_user.group}}"
      tags:
        - config

#
# if the sabnzbd config file does not exist
# copy it from /opt
#

    - name: check if config file exists
      stat:
        path="{{sabnzbd_config}}"
      register: config_exist
      tags:
        - default_config

    - name: copy default configuration file
      copy:
        src="/opt/sabnzbd.ini"
        dest="{{sabnzbd_config}}"
        mode=0755
        owner="{{service_user.name}}"
        group="{{service_user.group}}"
      when:
        config_exist.stat.exists == False
      tags:
        - default_config

#
# change the user id of the containers user
# this is usefull because we use volumes from the host
# for the db, logs etc
# inspired by: http://chapeau.freevariable.com/2014/08/docker-uid.html
#

    - name: replace all / in /etc/passwd and /etc/group
      replace:
        dest=/etc/passwd
        regexp='\/'
        replace='---000---'
      tags:
        - uid

    - name: replace /etc/passwd with specified UID and GID
      replace:
        dest=/etc/passwd
        regexp='{{service_user.name}}{{ ":" }}x{{ ":" }}{{service_user.uid}}{{ ":" }}{{service_user.gid}}{{ ":" }}{{service_user.comment}}{{ ":" }}{{service_user.home | regex_replace('\/','---000---')}}{{ ":" }}{{service_user.shell | regex_replace('\/','---000---')}}'
        replace='{{service_user.name}}{{ ":" }}x{{ ":" }}{{volume_uid}}{{ ":" }}{{volume_gid}}{{ ":" }}{{service_user.comment}}{{ ":" }}{{service_user.home | regex_replace('\/','---000---')}}{{ ":" }}{{service_user.shell | regex_replace('\/','---000---')}}'
        owner=root
        group=root
        mode=0644
      tags:
        - uid
      when: volume_uid != "" and volume_gid != ""

    - name: replace /etc/group with specified GID
      replace:
        dest=/etc/passwd
        regexp='{{service_user.name}}{{ ":" }}x{{ ":" }}{{service_user.gid}}{{ ":" }}'
        replace='{{service_user.name}}{{ ":" }}x{{ ":" }}{{volume_gid}}{{ ":" }}'
        owner=root
        group=root
        mode=0644
      tags:
        - uid
      when: volume_uid != "" and volume_gid != ""

    - name: replace all / in /etc/passwd and /etc/group
      replace:
        dest=/etc/passwd
        regexp='---000---'
        replace='/'
      tags:
        - uid

    # set the permissions on the folders.
    # if the folder is shared from the host this
    # step may fail. therefore we ignore the error
    - name: set the permissions of the sabnzbd dir
      command: "chown -R {{volume_uid}}:{{volume_gid}} {{service_user.home}}"
      ignore_errors: yes
      tags:
        - uid
