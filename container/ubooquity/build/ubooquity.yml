- hosts: localhost
  gather_facts: no
  become: yes

  vars:
    #couchpotato_git: https://github.com/RuudBurger/CouchPotatoServer.git

    ubooquity_download: http://vaemendis.net/ubooquity/downloads/Ubooquity-1.8.2.zip

    ubooquity_dir: /opt/ubooquity
    ubooquity_config: /home/ubooquity/preferences.xml
    ubooquity_cred: /home/ubooquity/webadmin.cred
    # the default admin password for the service - is: ubooquity
    ubooquity_admin_pass: d23acd4df07a1cb6b9deb0e79f24bd14995f55d631f4529b7b87e6cbdad9a296

    nginx_config: /etc/nginx/nginx.conf

    config_url: ""
    nginx_url: ""
    config_user: ""
    config_pass: ""



    volume_uid: ""
    volume_gid: ""

    container_user:
      name: 'container'
      home: '/home/container'
      uid: '500'
      gid: '500'
      group: 'container'
      system: 'yes'
      shell: '/bin/bash'
      comment: 'container user'

    # the user is automatically created by installing the
    # backuppc rpm
    service_user:
      name: 'ubooquity'
      home: '/home/ubooquity'
      uid: '990'
      gid: '990'
      group: 'ubooquity'
      system: 'yes'
      shell: '/bin/bash'
      comment: 'ubooquity user'

    yumpackages:
      - git
      - sudo
      - unzip
      - openssl
      - java-1.8.0-openjdk
      - nginx-1.6.2-1.el7.centos.ngx.x86_64.rpm
      # the rpm was built via:
      # https://github.com/arcanericky/nginx-with-ldap-plugin-rpm

    pippackages:
      - supervisor

    sudoers:
      file: "/etc/sudoers.d/{{container_user.name}}"
      line: "{{container_user.name}} ALL=(ALL) NOPASSWD:ALL"

  tasks:
    - name: install yum packages
      yum:
        name={{item}}
        state=present
      with_items: "{{yumpackages}}"
      become: no
      tags:
        - setup

    - name: install pip packages
      yum:
        name={{item}}
        state=present
      with_items: "{{pippackages}}"
      become: no
      tags:
        - setup

    - name: install sudoers file
      copy:
        content="{{sudoers.line}}"
        dest="{{sudoers.file}}"
      become: no
      tags:
        - setup

    - name: create container group
      group:
        name="{{container_user.group}}"
        gid="{{container_user.gid}}"
        system="{{container_user.system}}"
        state=present
      become: no
      tags:
        - setup

    - name: create container user
      user:
        name="{{container_user.name}}"
        home="{{container_user.home}}"
        uid="{{container_user.uid}}"
        group="{{container_user.group}}"
        shell="{{container_user.shell}}"
        system="{{container_user.system}}"
      become: no
      tags:
        - setup

    - name: create service group
      group:
        name="{{service_user.group}}"
        gid="{{service_user.gid}}"
        system="{{service_user.system}}"
        state=present
      become: no
      tags:
        - setup

    - name: create service daemon user
      user:
        name="{{service_user.name}}"
        home="{{service_user.home}}"
        uid="{{service_user.uid}}"
        group="{{service_user.group}}"
        shell="{{service_user.shell}}"
        system="{{service_user.system}}"
      become: no
      tags:
        - setup

#
# download and extract the ubooquity jar
#

    - name: create ubooquity directory
      file:
        path="{{ubooquity_dir}}"
        state=directory
      become: no
      tags:
        - setup

    - name: download the ubooquity zip
      get_url:
        url="{{ubooquity_download}}"
        dest="{{ubooquity_dir}}/ubooquity.zip"
      become: no
      tags:
        - setup

    - name: extract ubooquity zip
      unarchive:
        src="{{ubooquity_dir}}/ubooquity.zip"
        dest="{{ubooquity_dir}}"
        copy=no
      become: no
      tags:
        - setup

    - name: remove archive
      file:
        path="{{ubooquity_dir}}/ubooquity.zip"
        state=absent
      become: no
      tags:
        - setup

#
# setup the admin credentials for the service
#
    - name: set admin credentials for service
      copy:
        content="{{ubooquity_admin_pass}}"
        dest="{{ubooquity_cred}}"
        owner="{{service_user.name}}"
        group="{{service_user.group}}"
      become: no
      tags:
        - setup

#
# copy supvervisor config and necessary startup scripts
#

    - name: copy the supervisor config
      template:
        src=supervisord.ini
        dest=/etc/supervisord.d/
        owner=root
        group=root
        mode=0755
      become: no
      tags:
        - setup

#
# copy entrypoint and setup files
#

    - name: copy the entrypoint script
      copy:
        src=docker-entrypoint.sh
        dest=/opt/docker-entrypoint.sh
        owner=root
        group=root
        mode=0755
      become: no
      tags:
        - setup

    - name: copy the ubooquity playbook to /opt
      copy:
        src=ubooquity.yml
        dest=/opt/ubooquity.yml
        owner=root
        group=root
        mode=0644
      become: no
      tags:
        - setup

#
# create self signed ssl certificate
#
    - name: create ssl directory
      file:
        path=/etc/nginx/ssl
        state=directory
      tags:
        - ssl

    - name: check if certificate already exists
      stat: 
        path=/etc/nginx/ssl/nginx.crt
      register: ssl_cert
      tags:
        - ssl

    - name: create ssl certificate
      command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj '/C=CH/ST=Zurich/L=Zurich/O=private/OU=dockering/CN=barfoot.local'
      when: not ssl_cert.stat.exists
      tags:
        - ssl

#
# download the configuration file
#

    - name: download a current ubooquity config file
      get_url:
        url="{{config_url}}"
        dest="{{ubooquity_config}}"
        validate_certs=no
        force=yes
        owner="{{service_user.name}}"
        group="{{service_user.group}}"
      when: config_url != "" and config_user == ""
      tags:
        - config

    - name: download a current ubooquity config file (with password)
      get_url:
        url="{{config_url}}"
        url_username="{{config_user}}"
        url_password="{{config_pass}}"
        dest="{{ubooquity_config}}"
        validate_certs=no
        force=yes
        owner="{{service_user.name}}"
        group="{{service_user.group}}"
      when: config_url != "" and config_user != ""
      tags:
        - config

    - name: download a current nginx config file
      get_url:
        url="{{nginx_url}}"
        dest="{{nginx_config}}"
        validate_certs=no
        force=yes
      when: nginx_url != "" and config_user == ""
      tags:
        - config

    - name: download a current nginx config file (with password)
      get_url:
        url="{{nginx_url}}"
        url_username="{{config_user}}"
        url_password="{{config_pass}}"
        dest="{{ubooquity_config}}"
        validate_certs=no
        force=yes
      when: nginx_url != "" and config_user != ""
      tags:
        - config

#
# change the user id of the containers user
# this is usefull because we use volumes from the host
# for the db, logs etc
# inspired by: http://chapeau.freevariable.com/2014/08/docker-uid.html
#

    - name: replace all / in /etc/passwd and /etc/group
      replace:
        dest=/etc/passwd
        regexp='\/'
        replace='---000---'
      tags:
        - uid

    - name: replace /etc/passwd with specified UID and GID
      replace:
        dest=/etc/passwd
        regexp='{{service_user.name}}{{ ":" }}x{{ ":" }}{{service_user.uid}}{{ ":" }}{{service_user.gid}}{{ ":" }}{{service_user.comment}}{{ ":" }}{{service_user.home | regex_replace('\/','---000---')}}{{ ":" }}{{service_user.shell | regex_replace('\/','---000---')}}'
        replace='{{service_user.name}}{{ ":" }}x{{ ":" }}{{volume_uid}}{{ ":" }}{{volume_gid}}{{ ":" }}{{service_user.comment}}{{ ":" }}{{service_user.home | regex_replace('\/','---000---')}}{{ ":" }}{{service_user.shell | regex_replace('\/','---000---')}}'
        owner=root
        group=root
        mode=0644
      tags:
        - uid
      when: volume_uid != "" and volume_gid != ""

    - name: replace /etc/group with specified GID
      replace:
        dest=/etc/passwd
        regexp='{{service_user.name}}{{ ":" }}x{{ ":" }}{{service_user.gid}}{{ ":" }}'
        replace='{{service_user.name}}{{ ":" }}x{{ ":" }}{{volume_gid}}{{ ":" }}'
        owner=root
        group=root
        mode=0644
      tags:
        - uid
      when: volume_uid != "" and volume_gid != ""

    - name: replace all / in /etc/passwd and /etc/group
      replace:
        dest=/etc/passwd
        regexp='---000---'
        replace='/'
      tags:
        - uid

    # set the permissions on the folders.
    # if the folder is shared from the host this
    # step may fail. therefore we ignore the error
    - name: set the permissions of the ubooquity home dir
      command: "chown -R {{volume_uid}}:{{volume_gid}} {{service_user.home}}"
      ignore_errors: yes
      tags:
        - uid
